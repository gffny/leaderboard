<?xml version="1.0" encoding="UTF-8"?>
<!--
   Licensed to the Apache Software Foundation (ASF) under one
   or more contributor license agreements.  See the NOTICE file
   distributed with this work for additional information
   regarding copyright ownership.  The ASF licenses this file
   to you under the Apache License, Version 2.0 (the
   "License"); you may not use this file except in compliance
   with the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.    
-->
<project name="leaderboard-common" 
         xmlns:ivy="antlib:org.apache.ivy.ant">
	<!-- a sample common ant build file, used for ivy multi-project tutorial
	     feel free to copy and adapt it to your own needs
	     Note that the only targets specific to ivy are:
	        load-ivy
	     	resolve
	     	report
	     	ivy-new-version
	     	publish
	     	publish-local
	     	
	     All other targets are usual ant based targets, which could have been written
	     in a build not depending at all on ivy: 
	     resolve constructs a lib directory based upon ivy dependencies, and then the lib dir 
	     is used as in any classical ant build
	     -->	
	<import file="ivy-setup.xml" />
    
    <antversion property="valid_ant_version" atleast="${ant.minversion}" />
    <fail message="You must use Ant ${ant.minversion} or later. You are currently using ${ant.version}">
        <condition>
            <not>
                <isset property="valid_ant_version" />
            </not>
        </condition>
    </fail>

    <path id="run.path.id">
        <path refid="default.classpath" />
        <path location="${main.classes.dir}" />
        <path location="${main.resources.dir}" />
    </path>

	
    <!-- ================================= 
          target: resolve              
         ================================= -->
    <target name="resolve" depends="load-ivy" description="--> resolve and retrieve dependencies with ivy">
    	<ivy:cachepath pathid="default.classpath" />
    </target>

    <!-- ================================= 
          target: resolve-test              
         ================================= -->
    <target name="resolve-test" depends="load-ivy" description="--> resolve and retrieve test dependencies with ivy">
    	<ivy:cachepath pathid="test.classpath" conf="test" />
    </target>
    
    <!-- ================================= 
          target: report              
         ================================= -->
    <target name="report" depends="resolve" description="--> generates a report of dependencies">
        <ivy:report todir="${build.dir}"/>
    </target>
    
    <!-- ================================= 
          target: compile              
         ================================= -->
    <target name="compile" depends="resolve" description="--> compile the project">
        <mkdir dir="${main.classes.dir}" />
        <javac srcdir="${main.src.dir}" destdir="${main.classes.dir}" debug="true" source="${java.source.version}" target="${java.target.version}" includeantruntime="false">
            <classpath refid="default.classpath" />
            <classpath path="${main.resources.dir}" />
        </javac>
   </target>
    
    <!-- ================================= 
          target: compile-test
         ================================= -->
    <target name="compile-test" depends="compile, resolve-test" description="--> compile the tests">
        <mkdir dir="${test.classes.dir}" />
        <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" debug="true" includeantruntime="false">
            <classpath refid="test.classpath" />
            <classpath path="${test.resources.dir}" />
            <classpath path="${main.resources.dir}" />
        </javac>
    </target>
    
    <!-- ================================= 
          target: test
         ================================= -->
    <target name="test" depends="compile-test" description="--> run the tests">
        <junit printsummary="yes" haltonfailure="no" forkmode="once" fork="yes" dir="${basedir}" errorProperty="tests.failed" failureProperty="tests.failed">
            <classpath>
                <pathelement location="${test.classes.dir}" />
                <pathelement location="${test.resources.dir}" />
                <pathelement location="${main.classes.dir}" />
                <pathelement location="${main.resources.dir}" />
                <path refid="test.classpath" />
            </classpath>
            <formatter type="plain" />
            <formatter type="xml" />

            <batchtest fork="yes" todir="${test.reports.dir}">
                <fileset dir="${test.src.dir}">
                    <include name="**/*Test.java" />
                </fileset>
            </batchtest>
        </junit>
        <fail if="tests.failed">Tests failed!</fail>
    </target>
    
    <!-- ================================= 
          target: run
         ================================= -->
    <target name="run" depends="version, compile" description="--> compile and run the project">
        <java classpathref="run.path.id" classname="${main.class.name}" />
    </target>

	<target name="ivy-new-version" depends="load-ivy" unless="ivy.new.revision">
    	<!-- default module version prefix value -->
		<property name="module.version.prefix" value="${module.version.target}-dev-b" />
		
    	<!-- asks to ivy an available version number -->
		<ivy:info file="${ivy.file}" />
    	<ivy:buildnumber 
    		organisation="${ivy.organisation}" module="${ivy.module}" 
    		revision="${module.version.prefix}" defaultBuildNumber="1" revSep=""/>
	</target>

    <target name="local-version">
		<tstamp>
			<format property="now" pattern="yyyyMMddHHmmss"/>
		</tstamp>
        <property name="ivy.new.revision" value="${module.version.target}-local-${now}"/>
    </target>
	
	<target name="version" depends="ivy-new-version">
    	<exec executable="git" outputproperty="git.commit" failifexecutionfails="false" errorproperty="">
    		<arg value="rev-parse" />
    		<arg value="HEAD" />
		</exec>
		
    	<!-- create version file in classpath for later inclusion in package -->
        <mkdir dir="${main.classes.dir}"/>
		<echo message="version=${ivy.new.revision}${line.separator}" file="${main.classes.dir}/${ant.project.name}.build.properties" append="false" />
		<echo message="commit=${git.commit}${line.separator}" file="${main.classes.dir}/${ant.project.name}.build.properties" append="true" />
		<echo message="build number=${ivy.hudson.build.number}${line.separator}" file="${main.classes.dir}/${ant.project.name}.build.properties" append="true" />

		<!-- load generated version properties file -->
        <property file="${main.classes.dir}/${ant.project.name}.build.properties" />
    </target>

    <!-- ================================= 
          target: jar              
         ================================= -->
    <target name="jar" depends="version, compile" description="--> make a jar">
        <jar destfile="${jar.file}">
            <fileset dir="${main.classes.dir}" />
            <fileset dir="${main.resources.dir}" />
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Build-Version" value="${version}" />
            </manifest>
        </jar>
    </target>

    <!-- ================================= 
          target: war              
         ================================= -->
    <target name="war" depends="version, compile" description="--> make a war">
    	<ivy:cachepath pathid="war.classpath" conf="war" />
        <!-- see http://www.beilers.com/2010/06/ivy-dependency-management-lessons-learned-and-ant-1-8-mapped-resources/ -->
        <war destfile="${war.file}" basedir="${webcontent.dir}">
            <mappedresources>
              <restrict>
                <path refid="war.classpath"/>
                <type type="file"/>
              </restrict>
              <chainedmapper>
                <flattenmapper/>
                <globmapper from="*" to="WEB-INF/lib/*"/>
              </chainedmapper>
            </mappedresources>
            <classes dir="${main.classes.dir}" />
            <classes dir="${main.resources.dir}" />
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Build-Version" value="${version}" />
            </manifest>
        </war>
    </target>

    <!-- ================================= 
          target: package              
         ================================= -->
    <target name="package" depends="jar" description="--> package this project (usually make a jar file)">
    </target>

    <!-- ================================= 
          target: publish              
         ================================= -->
    <target name="publish" depends="clean-build, package" description="--> publish this project in the ivy repository">
    	<ivy:publish artifactspattern="${build.dir}/[artifact].[ext]" 
    			           resolver="shared"
    			           pubrevision="${version}" 
    			           status="release"
    	/>
        <echo message="project ${ant.project.name} released with version ${version}" />
    </target>

    <!-- ================================= 
          target: publish-local              
         ================================= -->
    <target name="publish-local" depends="local-version, package" description="--> publish this project in the local ivy repository">
    	<ivy:publish artifactspattern="${build.dir}/[artifact].[ext]" 
    			        resolver="local"
    			        pubrevision="${version}"
				        pubdate="${now}"
    			        status="integration"
    					forcedeliver="true"
    	/>
        <echo message="project ${ant.project.name} published locally with version ${version}" />
    </target>

	<!-- ================================= 
          target: clean-local              
         ================================= -->
	<target name="clean-local" depends="load-ivy" 
		description="--> cleans the local repository for the current module">
		<ivy:info file="${ivy.file}" />
	   <delete dir="${ivy.local.default.root}/${ivy.organisation}/${ivy.module}"/>
	</target>

    <!-- ================================= 
          target: clean-build              
         ================================= -->
    <target name="clean-build" description="--> clean the project built files">
        <delete includeemptydirs="true" dir="${build.dir}"/>
    </target>

    <!-- ================================= 
          target: clean              
         ================================= -->
    <target name="clean" depends="clean-build" description="--> clean the project" />
</project>

